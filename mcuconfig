#!/usr/bin/env python3
#	mcuconfig - Generation of microcontroller build setups.
#	Copyright (C) 2019-2020 Johannes Bauer
#
#	This file is part of mcuconfig.
#
#	mcuconfig is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	mcuconfig is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with mcuconfig; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import json
import contextlib
import datetime
import mako.lookup
from FriendlyArgumentParser import FriendlyArgumentParser
from VectorTable import VectorTable
from PinMap import PinMapSTMCortexM

parser = FriendlyArgumentParser(description = "Configure a microcontroller project.")
parser.add_argument("-f", "--force-optional", action = "store_true", help = "By default, optional files are not overwritten when a project is regenerated. With this option, all generated files are written from scratch.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("config_file", metavar = "filename", help = "Specifies configuration file to use.")
parser.add_argument("target_dir", metavar = "dirname", help = "Directory in which the generated files are written.")
args = parser.parse_args(sys.argv[1:])

class DeviceNotSupportedException(Exception): pass
class TemplateException(Exception): pass

class Helper():
	@classmethod
	def get_multiplier_flag(cls, ratio, values):
		(last_key, last_value) = (None, None)
		for (key, value) in sorted(values.items()):
			if last_key is None:
				(last_key, last_value) = (key, value)
			if ratio < key:
				return (last_key, last_value)
			(last_key, last_value) = (key, value)
		return (last_key, last_value)

class Configurator():
	def __init__(self, args):
		self._args = args
		with open(self._args.config_file) as f:
			self._config = json.load(f)
		self._base_path = os.path.realpath(os.path.dirname(__file__)) + "/"
		self._dev_path = self._base_path + "system/" + self._config["processor"].lower() + "/"
		if not os.path.isdir(self._dev_path):
			raise DeviceNotSupportedException("Unsupported device: %s (no such directory: %s)" % (self._config["processor"], self._dev_path))
		with open(self._dev_path + "device.json") as f:
			self._dev_config = json.load(f)
		self._utcnow = datetime.datetime.utcnow()

		self._lookup = mako.lookup.TemplateLookup([ self._dev_path, self._base_path + "common/" ], strict_undefined = True, input_encoding = "utf-8")
		self._pinmap = PinMapSTMCortexM(self._config["pinmap"])

	def _generate(self, filename, force = False):
		def raise_error(msg):
			raise TemplateException(msg)

		output_filename = self._args.target_dir + "/" + filename
		if (not force) and os.path.exists(output_filename):
			return

		template = self._lookup.get_template(filename)
		template_args = {
			"conf":		self._config,
			"dev":		self._dev_config,
			"now":		self._utcnow,
			"vectors":	VectorTable(self._dev_path + "/vectors.txt"),
			"h":		Helper,
			"pinmap":	self._pinmap,
			"error":	lambda msg: raise_error("Template %s threw error: %s" % (filename, msg)),
		}
		output = template.render(**template_args)
		with contextlib.suppress(FileExistsError):
			os.makedirs(os.path.dirname(output_filename))
		with open(output_filename, "w") as f:
			f.write(output)

	def run(self):
		for filename in self._dev_config["force_files"]:
			self._generate(filename, force = True)
		for filename in self._dev_config["optional_files"]:
			self._generate(filename, force = self._args.force_optional)

Configurator(args).run()
